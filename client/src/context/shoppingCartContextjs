import { createContext, useEffect, useState } from 'react';
import { getToken } from '../utils/getToken';


export const ShoppingCartContext = createContext();

export const ShoppingCartContext = (props) => {

	const token = getToken();

	const [user, setUser] = useState(false);
	// const [updateAccount, setUpdateAccount] = useState({});
	const [userProfile, setUserProfile] = useState(null);
	const [error, setError] = useState(null);




  function increaseCartQuantity(id: number) {
    setCartItems(currItems => {
      if (currItems.find(item => item.id === id) == null) {
        return [...currItems, { id, quantity: 1 }]
      } else {
        return currItems.map(item => {
          if (item.id === id) {
            return { ...item, quantity: item.quantity + 1 }
          } else {
            return item
          }
        })
      }
    })
  }





	const isUserLoggedIn = () => {
		console.log(token);
		if (token) {
			setUser(true);
			console.log("OK: User is logged in");
			// redirectTo("/my-account")
		} else {
			setUser(false);
			console.log("WARNING: User is NOT logged ");
		}
	};






	const getProfile = async () => {
		const myHeaders = new Headers();
		myHeaders.append("Authorization", `Bearer ${token}`);
		const requestOptions = {
			method: "GET",
			headers: myHeaders,
		};
		try {
			const response = await fetch(
				"http://localhost:5000/api/users/userInfo",
				requestOptions
			);
			const profileData = await response.json();
			setUserProfile(profileData);
			console.log("Profile data: ", profileData);
		} catch (error) {
			console.log("Error fetching profile data: ", error);
		}
	};


	useEffect(() => {
		getProfile();
	}, []);

	useEffect(() => {
		isUserLoggedIn();
	}, [user]);



	return (
		<AuthContext.Provider
			value={{
				user, setUser,
				signOut,
				isUserLoggedIn,
				getProfile,
				userProfile, setUserProfile,
				token,
				// updateAccount, setUpdateAccount
			}}>
			{props.children}
		</AuthContext.Provider>
	);
};